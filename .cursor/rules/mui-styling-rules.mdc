---
globs: *.ts,*.tsx
description: React + Material UI styling guidelines for the Trellone project
---

## React + Material UI (MUI) Styling Rules

These rules ensure consistent styling, optimal bundle size (tree-shaking), and alignment with the project theme.

### 1) Always use tree-shakable imports for MUI components and icons

- Import each component/icon from its specific path to leverage tree-shaking.
- Correct (recommended):

```ts
import EditIcon from '@mui/icons-material/Edit'
import PersonIcon from '@mui/icons-material/Person'
import PublicIcon from '@mui/icons-material/Public'
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff'
import Box from '@mui/material/Box'
import Button from '@mui/material/Button'
import Card from '@mui/material/Card'
import Divider from '@mui/material/Divider'
import IconButton from '@mui/material/IconButton'
import Skeleton from '@mui/material/Skeleton'
import Stack from '@mui/material/Stack'
import Typography from '@mui/material/Typography'
import Grid from '@mui/material/Unstable_Grid2'
```

- Incorrect (avoid):

```ts
// Do not barrel-import from '@mui/material' or '@mui/icons-material'
import { Box, Button, Card } from '@mui/material'
import { Edit as EditIcon } from '@mui/icons-material'
```

### 2) Prefer the `sx` prop; use `styled` only for widely reused overrides

- Use `sx` for local/one-off styles or when mixing theme tokens directly in JSX.
- Use `styled` from `@mui/material/styles` only to create a stable variant of a MUI component that is reused across multiple places.
- Avoid creating unnecessary `styled` components; prefer `sx` to reduce style fragmentation.

Recommended `sx` usage example:

```tsx
<Box
  sx={(theme) => ({
    p: 2,
    borderRadius: 1,
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[900] : theme.palette.common.white
  })}
>
  ...
</Box>
```

### 3) Ensure color-related styles work in both light and dark modes

- When using properties like `backgroundColor`, `bgcolor` and `color`, do not hard-code colors that only work in one mode.
- Prefer theme palette/tokens or branch by `theme.palette.mode`.

Correct example:

```tsx
<Card
  sx={(theme) => ({
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.common.white,
    color: theme.palette.text.primary
  })}
/>
```

Avoid:

```tsx
// Avoid hard-coding colors that only fit one mode
<Box sx={{ backgroundColor: '#ffffff' }} />
```

### 4) Always import `Grid` from `@mui/material/Unstable_Grid2`

- Use the Grid2 variant to keep the layout API consistent across the project.

```ts
import Grid from '@mui/material/Unstable_Grid2'
```

### 5) Consult the theme before applying styles

- Always review and adhere to tokens, sizes, palette, and overrides defined in [`src/theme.ts`](mdc:src/theme.ts).
- Prefer existing tokens such as `theme.palette.*` and `theme.trellone.*` over hard-coded values.
- If you need new tokens (sizes, colors, spacing, etc.), add them in [`src/theme.ts`](mdc:src/theme.ts) instead of scattering constants across components.

### Quick checklist

- [ ] Use tree-shakable imports for MUI (no barrel imports).
- [ ] Prefer `sx` for local styles; use `styled` for broadly reused overrides.
- [ ] Ensure colors work in both light and dark modes via theme.
- [ ] Import `Grid` from `@mui/material/Unstable_Grid2`.
- [ ] Reference tokens from the theme; add new tokens to the theme when needed.
